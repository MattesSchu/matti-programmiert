"use strict";(self.webpackChunkprogrammieren=self.webpackChunkprogrammieren||[]).push([[621],{7330:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var i=n(7462),a=n(3366),s=(n(7294),n(3905)),r=["components"],c={sidebar_position:1,title:"Cast"},o=void 0,l={unversionedId:"cpp/casts",id:"cpp/casts",title:"Cast",description:"stati_cast",source:"@site/docs/cpp/casts.mdx",sourceDirName:"cpp",slug:"/cpp/casts",permalink:"/matti-programmiert/docs/cpp/casts",editUrl:"https://github.com/mattesschu/matti-programmiert/tree/main/programmieren/docs/cpp/casts.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Cast"},sidebar:"tutorialSidebar"},p={},u=[{value:"stati_cast",id:"stati_cast",level:2},{value:"dynamic_cast",id:"dynamic_cast",level:2},{value:"reinterpret_cast",id:"reinterpret_cast",level:2},{value:"const_cast",id:"const_cast",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,r);return(0,s.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"stati_cast"},"stati_cast"),(0,s.kt)("p",null,"Beim Wort ",(0,s.kt)("inlineCode",{parentName:"p"},"cast")," handelt es sich im technische und w\xf6rtlichen Sinne um das Verb ",(0,s.kt)("inlineCode",{parentName:"p"},"gie\xdfen"),". Es beschreibt anschaulich, dass ein Eingangsobjekt in eine ",(0,s.kt)("em",{parentName:"p"},"neue Form")," ",(0,s.kt)("inlineCode",{parentName:"p"},"gegossen")," wird."),(0,s.kt)("p",null,"Der ",(0,s.kt)("inlineCode",{parentName:"p"},"static cast")," wird benutzt, um eine ",(0,s.kt)("inlineCode",{parentName:"p"},"implizite")," Konvertierung umzudrehen. Es wird also vom Programmierenden erwartet, dass genau gewusst wird, welcher Typ das Objekt hat oder haben kann. Die Konvertierung vollf\xfchrt dann ",(0,s.kt)("strong",{parentName:"p"},"keine")," \xdcberpr\xfcfungen zur Laufzeit."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"im\xb7pli\xb7zit"),(0,s.kt)("ol",{parentName:"blockquote"},(0,s.kt)("li",{parentName:"ol"},'mit enthalten, mit gemeint, aber nicht ausdr\xfccklich gesagt "implizite Drohungen Forderungen"'),(0,s.kt)("li",{parentName:"ol"},'nicht aus sich selbst zu verstehen, sondern logisch zu erschlie\xdfen "Partizipialkonstruktionen sind implizit"'))),(0,s.kt)("p",null,"Es wird einfach verwendet, wenn bekannt ist, welches Objekt zu erwarten ist:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void meineFunktion(void* eingangsVoidZeiger)\n{\n  MeineKlasse* vonVoidZeiger = static_cast<MeineKlasse>(eingangsVoidZeiger);\n  ...\n}\n\nint main() {\n  MeineKlasse meineKlasse;\n  meineFunktion(&meineKlasse); // Hier wird die Referenz auf meien Klasse \xfcbergeben\n}\n")),(0,s.kt)("h2",{id:"dynamic_cast"},"dynamic_cast"),(0,s.kt)("p",null,"Der dynamische"),(0,s.kt)("h2",{id:"reinterpret_cast"},"reinterpret_cast"),(0,s.kt)("h2",{id:"const_cast"},"const_cast"))}m.isMDXComponent=!0}}]);